// <auto-generated />
using System;
using BEDuo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BEDuo.Migrations
{
    [DbContext(typeof(BEDuoDbContext))]
    [Migration("20240522001338_TestingProperties")]
    partial class TestingProperties
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BEDuo.Models.Classes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("University")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "An introductory course on basic mathematics.",
                            EndDate = new DateTime(2025, 5, 31, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mathematics 101",
                            StartDate = new DateTime(2024, 9, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            University = "Western Governor's University",
                            UserId = 1,
                            isPublic = true
                        },
                        new
                        {
                            Id = 2,
                            Description = "A comprehensive study of English literature.",
                            EndDate = new DateTime(2025, 5, 31, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "English Literature",
                            StartDate = new DateTime(2024, 9, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            University = "Western Governor's University",
                            UserId = 1,
                            isPublic = true
                        },
                        new
                        {
                            Id = 3,
                            Description = "An advanced course on classical and modern physics.",
                            EndDate = new DateTime(2025, 5, 31, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "Physics",
                            StartDate = new DateTime(2024, 9, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            University = "Western Governor's University",
                            UserId = 2,
                            isPublic = true
                        },
                        new
                        {
                            Id = 4,
                            Description = "An exploration of art history from ancient to modern times.",
                            EndDate = new DateTime(2025, 5, 31, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "Art History",
                            StartDate = new DateTime(2024, 9, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2,
                            isPublic = true
                        },
                        new
                        {
                            Id = 5,
                            Description = "Learn the basics of cooking, including recipes and techniques.",
                            EndDate = new DateTime(2024, 12, 15, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cooking Basics",
                            StartDate = new DateTime(2024, 9, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            isPublic = true
                        },
                        new
                        {
                            Id = 6,
                            Description = "A class on the fundamentals of photography.",
                            EndDate = new DateTime(2024, 12, 15, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "Photography",
                            StartDate = new DateTime(2024, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            isPublic = true
                        });
                });

            modelBuilder.Entity("BEDuo.Models.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 1,
                            DateCreated = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Introduction to basic algebra. Today's class was really boring. -Caleb"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 1,
                            DateCreated = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Went over Shakespeare today. A really interesting dude, I guess. Study session at 5 PM? - Mindy"
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 3,
                            DateCreated = new DateTime(2024, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "I do not know what I may appear to the world, but to myself I seem to have been only like a boy playing on the seashore, and diverting myself in now and then finding a smoother pebble or a prettier shell than ordinary, whilst the great ocean of truth lay all undiscovered before me. - Issac Newton"
                        },
                        new
                        {
                            Id = 7,
                            ClassId = 3,
                            DateCreated = new DateTime(2024, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Physics is hard. - Max"
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 4,
                            DateCreated = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The Renaissance and its impact on art."
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 5,
                            DateCreated = new DateTime(2024, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basic knife skills and safety."
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 6,
                            DateCreated = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Understanding camera settings and functions."
                        });
                });

            modelBuilder.Entity("BEDuo.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = true,
                            StartDate = new DateTime(2023, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A.P. Exams",
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = false,
                            StartDate = new DateTime(2023, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Programming",
                            UserID = 1
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = true,
                            StartDate = new DateTime(2023, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Music",
                            UserID = 2
                        });
                });

            modelBuilder.Entity("BEDuo.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("University")
                        .HasColumnType("text");

                    b.Property<string>("UserImageURL")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Night Owl looking to learn!",
                            Uid = "RjGMb2h53VelT6Mis05ekXrRxvG2",
                            University = "Western Governor's University",
                            Username = "kikilearn"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "THS <3, cat mom first, AP student second.",
                            Uid = "EBdW2g5N9xddUcK048GpXjvaUrq1",
                            Username = "zel"
                        });
                });

            modelBuilder.Entity("ClassesSchedule", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("integer");

                    b.Property<int>("SchedulesId")
                        .HasColumnType("integer");

                    b.HasKey("ClassesId", "SchedulesId");

                    b.HasIndex("SchedulesId");

                    b.ToTable("ClassesSchedule");
                });

            modelBuilder.Entity("ClassesSchedule", b =>
                {
                    b.HasOne("BEDuo.Models.Classes", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BEDuo.Models.Schedule", null)
                        .WithMany()
                        .HasForeignKey("SchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
